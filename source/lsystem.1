#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 2484 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 23 #"lsystem.generate-string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 12 #"tlsyst.angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 14 #"tlsyst.lsystem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 19 #"sierpinski-triangle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 17 #"sierpinski-carpet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 12 #"dragon-curve"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 11 #"tree-growth"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 12 #"plant-growth"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 12 #"gosper-curve"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 14 #"koch-snowflake"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 20 #"sierpinski-arrowhead"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 13 #"branch-growth"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 11 #"binary-tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 18 #"koch-antisnowflake"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 10 #"koch-curve"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 13 #"hilbert-curve"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 16 #"cesaro-fractal85"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 16 #"cesaro-fractal90"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; DEFINITION"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(4
 #"; a ``Turtle string'' is a finite sequence of elements that are part "
 #"of the"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #"; following symbols :"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";    T, T[x], F, F[x], <, >, +, +[x], -, -[x] where x is a number."
0 0 24 29 1 #"\n"
0 0 17 3 80
(5
 #"; It is represented as a list whose elements are part of the followin"
 #"g strings :"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
(6
 #";    \"T\", \"T[x]\", \"F\", \"F[x]\", \"<\", \">\", \"+\", \"+[x]\","
 #" \"-\", \"-[x]\""
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #"; where x is a number."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(7
 #"; a ``Turtle L-system'' contains the representation of a ``L-system''"
 #" generating"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #"; a ``Turtle string'' and the rotation angle."
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; It is represented as a dotted paid (lsystem . angle)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(8
 #"; a ``L-system'' contains an ``axiom'', the representation of a set o"
 #"f"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(9
 #"; production ``rules'' and the representation of a set of terminal ``"
 #"rules''."
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #"; It is represented as a triplet (axiom p-rules t-rules)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(10
 #"; an ``axiom'' is a list of ``symbols'' whose ``parameters'', if any,"
 #" are numbers"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(11
 #"; a set of ``rules'' is represented by a list l of representations of"
 #" ``rules''"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; a ``rule'' is represented by either"
0 0 24 29 1 #"\n"
0 0 17 3 71
(12
 #";;        a pair (s ls)  if there is no probability associated with i"
 #"t,"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";;               where s is the ``symbol'' the ``rule'' applies to"
0 0 24 29 1 #"\n"
0 0 17 3 71
(13
 #";;                      whose ``parameters'', if any, are ``variables"
 #"''"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(14
 #";;               and ls is the list of ``symbols'' the ``rule'' trans"
 #"lates to"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(15
 #";;        a triplet (s ls p)  if there is a probability associated wi"
 #"th it,"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(16
 #";;               s and ls are as above and p is a number such that 0 "
 #"< p < 1"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; a ``symbol'' is either"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;        a string, if it as no parameter"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;        a list whose car is a string and whose cdr is"
0 0 24 29 1 #"\n"
0 0 17 3 74
(17
 #";;               a list of ``arithmetical expression'', its ``paramet"
 #"ers''"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(18
 #"; an ``arithmetical expression'' is either a number, a ``variable'' o"
 #"r a list"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(19
 #"; whose car is one of the special scheme symbols '+, '-, '*, '/ and w"
 #"hose cdr"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #"; is a list of ``arithmetical expressions''"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(20
 #"; a ``variable'' is a scheme symbol different from '+, '-, '*, '/ and"
 #" '()"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; TURTLE L-SYSTEM GETTERS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(21
 #"; if tlsyst is a ``Turtle L-system'', (tlsyst.angle tlsyst) is the ro"
 #"tation"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #"; angle (in degree) associated to the ``Turtle L-system''"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"tlsyst.angle"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; if tlsyst is a ``Turtle L-system'', (tlsyst.lsystem tlsyst) is the"
0 0 24 29 1 #"\n"
0 0 17 3 72
(22
 #"; representation of the L-system associated with the ``Turtle L-syste"
 #"m''"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"tlsyst.lsystem"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; L-SYSTEM GETTERS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(23
 #"; if lsystem is a ``L-system'', (lsystem.axiom lsystem) is the ``axio"
 #"m'' of the L-system"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"lsystem.axiom"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(24
 #"; if lsystem is a ``L-system'', (lsystem.p-rules lsystem) is a functi"
 #"on the maps"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #"; every symbol to a list of symbols,"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; according to the production rules of the L-system"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"lsystem.p-rules"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lsystem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 11 #"apply-rules"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"lsystem"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80 24 0 0 24 29 1 #"\n"
0 0 17 3 57 #"; every nonterminal symbol to a list of terminal symbols,"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; according to the production rules of the L-system"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"lsystem.t-rules"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lsystem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 11 #"apply-rules"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 7 #"lsystem"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; RULE GETTERS AND PREDICATES"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; if rule is a ``rule'', (proba? rule) returns true if there is a"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; probability associated with the rule"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"proba?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rule"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(25
 #"; if rule is a ``rule'', (rule.applies-to rule) is the ``symbol'' it "
 #"applies to"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"rule.applies-to"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(26
 #"; if rule is a ``rule'', (rule.translates-to rule) is the list of ``s"
 #"ymbols''"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #"; the rules translates to"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"rule.translates-to"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; if rule is a ``rule'' with a probability associated with it,"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; (rule.proba rule) is the probability"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"rule.proba"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; SYMBOL GETTERS AND PREDICATES"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; if s is a ``symbol'', (param? s) returns true if s has parameters"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"param?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; if s is a ``symbol'', (symb.head s) is the string it contains"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"symb.head"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"param?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 85
(27
 #"; if s is a symbol ``symbol'' with parameters, (symb.params s) its li"
 #"st of parameters"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"symb.params"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(28
 #"; if a and b are ``symbols'', (symb= a b) returns true if a and b rep"
 #"resent the"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#"; same symbol, that is if the string they contains are the same"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"symb=?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"symb.head"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 9 #"symb.head"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; APPLYING A SET OF RULES TO A SYMBOL"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(29
 #"; if s is a ``symbol'' whose parameters, if any, are numbers, and rul"
 #"es a set of ``rules''"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(30
 #"; then (apply-rules s rules) is the result of applying the ``rules'' "
 #"to"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(31
 #"; the ``symbol'' s. If several ``rules'' are associated to the ``symb"
 #"ol'' s,"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(32
 #"; a random number between 0 and 1 is chosen and the function apply-st"
 #"och-rules"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; is called to chose which ``rule'' to apply to the ``symbol''. "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"apply-rules"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"symb=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 15 #"rule.applies-to"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"proba?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 17 #"apply-stoch-rules"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 5 #")))  "
0 0 17 3 24 #"; probability associated"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 6 #"symb=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 15 #"rule.applies-to"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"apply-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 4 #"))  "
0 0 17 3 27 #"; no probability associated"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"apply-rules"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(33
 #"; if s is a ``symbol'' whose parameters, if any, are numbers, p a num"
 #"ber strictly"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #"; between 0 and 1 and rules a set of ``rules'',"
0 0 24 29 1 #"\n"
0 0 17 3 83
(34
 #"; then (apply-stoch-rules s rules p) is the result of applying the ``"
 #"rules'' to the"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(35
 #"; ``symbol'' s. To choose the ``rule'' to apply, the probabilities as"
 #"sociated"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(36
 #"; with the ``rules'' (reporting to s) are summed until it goes above "
 #"p,"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(37
 #"; then the last ``rule'' to be added to the sum is applied to the ``s"
 #"ymbol''"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"apply-stoch-rules"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"symb=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 15 #"rule.applies-to"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rule.proba"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"apply-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 4 #"))  "
0 0 17 3 16 #"; sum is above p"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 6 #"symb=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 15 #"rule.applies-to"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 17 #"apply-stoch-rules"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rule.proba"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 6 #"))))  "
0 0 17 3 16 #"; sum is below p"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 17 #"apply-stoch-rules"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 14 3 1 #"p"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; APPLYING A SINGLE RULE TO A SYMBOL"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(38
 #"; if s is a ``symbol'' whose parameters, if any, are numbers, and if "
 #"rule is a ``rule'',"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(39
 #"; then (apply-rule s rule) is the result of applying the ``rule'' to "
 #"the ``symbol''"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"apply-rule"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"param?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"rule.translates-to"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 3 #")  "
0 0 17 3 27 #"; no parameter to deal with"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 11 #"symb.params"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"variables"
0 0 24 3 2 #" ("
0 0 14 3 11 #"symb.params"
0 0 24 3 2 #" ("
0 0 14 3 15 #"rule.applies-to"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"ls"
0 0 24 3 2 #" ("
0 0 14 3 18 #"rule.translates-to"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 11 #"eval-symbol"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 3 #")) "
0 0 14 3 2 #"ls"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(40
 #"; if s is a ``symbol'', variables is a list of ``variables'' and valu"
 #"es is a"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(41
 #"; list of numbers such that every ``variable'' corresponds to a value"
 #", then"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(42
 #"; (eval-symbol s variables values) is the ``symbol'' obtained by repl"
 #"acing every"
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #"; ``variable'' in s by its value and simplifying"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"eval-symbol"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"param?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"symb.head"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-ari-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 11 #"symb.params"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(43
 #"; if exp is an ``arithmetical expression'', variables is a list of ``"
 #"variables''"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(44
 #"; and values is a  list of numbers such that every ``variable'' corre"
 #"sponds to a value,"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(45
 #"; then (eval-ari-exp exp variables values) corresponds to the number "
 #"obtained"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(46
 #"; by replacing every ``variable'' in exp by its value and simplifying"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"eval-ari-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-ari-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-ari-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 18 #"))))))))          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; GENERATING A STRING FROM A L-SYSTEM"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(47
 #"; if lsystem is the representation of a ``L-system'' generating a ``T"
 #"urtle string''"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #"; and order is a natural number,"
0 0 24 29 1 #"\n"
0 0 17 3 84
(48
 #"; then (lsystem.generate-string lsystem order) returns an order-th ``"
 #"Turtle string''"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(49
 #"; Note that an order of zero means applying the termination rules to "
 #"the axiom"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"lsystem.generate-string"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lsystem"
0 0 24 3 1 #" "
0 0 14 3 5 #"order"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"lstr->tstr"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 24 #"lsystem.terminate-string"
0 0 24 3 1 #" "
0 0 14 3 7 #"lsystem"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 22 #"lsystem.develop-string"
0 0 24 3 1 #" "
0 0 14 3 7 #"lsystem"
0 0 24 3 1 #" "
0 0 14 3 5 #"order"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(50
 #"; if lsystem is the representation of a ``L-system'' and order is a n"
 #"atural,"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(51
 #"; (lsystem.develop-string lsystem order) returns the result of applyi"
 #"ng the"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#"; production rules of lsystem order times to the axiom of lsystem"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"lsystem.develop-string"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lsystem"
0 0 24 3 1 #" "
0 0 14 3 5 #"order"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 5 #"order"
0 0 24 3 3 #") ("
0 0 14 3 13 #"lsystem.axiom"
0 0 24 3 1 #" "
0 0 14 3 7 #"lsystem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lsystem.p-rules"
0 0 24 3 1 #" "
0 0 14 3 7 #"lsystem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 22 #"lsystem.develop-string"
0 0 24 3 1 #" "
0 0 14 3 7 #"lsystem"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; A ``L-system string'' is represented as a list of ``symbols''"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(52
 #"; if lsystem is the representation of a ``L-system'' and ls is a ``L-"
 #"system string''"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(53
 #"; (lsystem.terminate-string lsystem ls) returns the result of applyin"
 #"g the"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; termination rules of the ``L-system'' to the ``L-system string''"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"lsystem.terminate-string"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lsystem"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lsystem.t-rules"
0 0 24 3 1 #" "
0 0 14 3 7 #"lsystem"
0 0 24 3 2 #") "
0 0 14 3 2 #"ls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(54
 #"; if lsymb is a ``symbol'', (lsymb->tsymb lsymb) is the corresponding"
 #" ``Turtle symbol''"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; that is, any symbol of the form (\"S\" x) is converted to \"S[x]\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"lsymb->tsymb"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lsymb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"param?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lsymb"
0 0 24 3 3 #")) "
0 0 14 3 5 #"lsymb"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"symb.head"
0 0 24 3 1 #" "
0 0 14 3 5 #"lsymb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 19 3 3 #"\"[\""
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 11 #"string-join"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 2 #"~r"
0 0 24 3 2 #" ("
0 0 14 3 11 #"symb.params"
0 0 24 3 1 #" "
0 0 14 3 5 #"lsymb"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\", \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 19 3 3 #"\"]\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                    "
0 0 24 29 1 #"\n"
0 0 17 3 76
(55
 #"; if lstr is a ``L-system string'', (lstr->tstr lstr) is a ``Turtle s"
 #"tring''"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"lstr->tstr"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lstr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 12 #"lsymb->tsymb"
0 0 24 3 1 #" "
0 0 14 3 4 #"lstr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; EXAMPLES OF L-SYSTEMS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; The ``Turtle L-system'' corresponding to the Sierpinsky triangle"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"sierpinski-triangle"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 3 #"120"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; The ``Turtle L-system'' corresponding to the Sierpinsky carpet"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"sierpinski-carpet"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"90"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; The ``Turtle L-system'' corresponding to the dragon curve"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"dragon-curve"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"D\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"D\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"E\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"D\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"D\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"E\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"45"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; The ``Turtle L-system'' corresponding to the tree growth"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"tree-growth"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #") "
0 0 21 3 4 #"0.33"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #") "
0 0 21 3 4 #"0.33"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #") "
0 0 21 3 4 #"0.34"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 4 #"25.7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; The ``Turtle L-system'' corresponding to the plant growth"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"plant-growth"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #") (("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\">\""
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\">\""
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\">\""
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #") (("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; The ``Turtle L-system'' corresponding to the Gosper curve"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"gosper-curve"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 3 #" ( "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"60"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; The ``Turtle L-system'' corresponding to the Koch snowflake"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"koch-snowflake"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"60"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; The ``Turtle L-system'' corresponding to the Sierpinsky arrowhead"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"sierpinski-arrowhead"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"60"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; The ``Turtle L-system'' corresponding to the branch growth"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"branch-growth"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"X\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"X\""
0 0 24 3 6 #" ())))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"25"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; The ``Turtle L-system'' corresponding to a binary tree"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"binary-tree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 21 3 4 #"0.75"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 21 3 4 #"0.25"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"45"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; The ``Turtle L-system'' corresponding to the Koch antisnowflake"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"koch-antisnowflake"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"60"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; The ``Turtle L-system'' corresponding to the Koch curve"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"koch-curve"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"90"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; The ``Turtle L-system'' corresponding to the Hilbert curve"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"hilbert-curve"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"A\""
0 0 24 3 4 #" ())"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"B\""
0 0 24 3 6 #" ())))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"90"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; The ``Turtle L-system'' corresponding to the Cesaro fractal (85)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"cesaro-fractal85"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 2 #"85"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 21 3 3 #"170"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 2 #"85"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"T\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; The ``Turtle L-system'' corresponding to the Cesaro fractal (90)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"cesaro-fractal90"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"T\""
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"T\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; The ``Turtle L-system'' corresponding to the Cesaro fractal (90)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
